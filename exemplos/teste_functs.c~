/* 
 * test_ordenamento.c: recebe um inteiro, cria uma array de valores aleatorios com este inteiro e ordena através do bubble sort. O objetivo é testar inits, yelds e suspends durante a execução de funções demoradas e rápidas. A cada 100 ordenamentos a função libera intencionalmente seu recurso.
 */

#include	"../include/support.h"
#include	"../include/cthread.h"
#include	<stdio.h>
#include	<stdlib.h>
#include 	<time.h>
#include 	"../src/cthread.c"



int vetor[MAX_SIZE];
int  inc = 0;

void *func(void *arg){
{
	int i = 0;
	printf("iniciando função %d \n);
  // criar função que demora para rodar.
	for(i=0; i < 10000; i++){
		if(i % 10000)
			printf("Finalizando função %d \n", *((int *)arg))
	}
		
 
}


int main(int argc, char *argv[]) {
	
	int id0, id1, id2, id3;
	int i=0;
	
	id0 = ccreate(func0, (void *)&i, 0);
	i++;
	id1 = ccreate(func0, (void *)&i, 0);
	i++;
	id2 = ccreate(func0, (void *)&i, 0);
	i++;
	id3 = ccreate(func0, (void *)&i, 0);
	
	cyield(); // id0 cede sua vez.

	cjoin(id2); // id1 fica presa ao fim de id2.
	
	csuspend(id3);  // id3 entra em estado suspenso.
	cresume(id3); // tira id3 do estado suspenso.

	
	// incluir testes do semáforo.



}

